{"version":3,"sources":["webpack:///./src/components/SEO/index.jsx","webpack:///./src/pages/index.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./node_modules/react-md/lib/Media/index.js","webpack:///./src/components/PostCategories/index.jsx","webpack:///./src/components/PostPreview/index.jsx","webpack:///./src/components/PostListing/index.jsx"],"names":["SEO","render","title","description","image","postURL","this","props","postNode","postPath","postSEO","postMeta","frontmatter","excerpt","cover","urljoin","config","siteUrl","pathPrefix","siteTitle","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter","Component","Index","data","className","rel","href","postEdges","allMarkdownRemark","edges","pageQuery","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","str","join","parts","split","arguments","slice","call","module","exports","definition","__esModule","MediaOverlay","Media","undefined","_Media3","_interopRequireDefault","_MediaOverlay3","obj","default","PostCategories","categories","map","category","key","style","textDecoration","to","label","PostPreview","state","mobile","handleResize","bind","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","expand","coverHeight","path","raise","height","paddingBottom","PostCover","coverClassName","raised","secondary","expander","avatar","icon","iconClassName","moment","date","format","dateFormat","subtitle","timeToRead","expandable","PostTags","tags","PostListing","postList","forEach","postEdge","node","fields","slug","getPostList","post"],"mappings":"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","file":"component---src-pages-index-jsx-43c7742e366bc32ba342.js","sourcesContent":["import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push([\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      ]);\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport Layout from '../layout';\nimport PostListing from '../components/PostListing';\nimport SEO from '../components/SEO';\nimport config from '../../data/SiteConfig';\n\nconst Index = ({ data }) => (\n  <Layout title=\"Blogi\">\n    <div className=\"index-container\">\n      <Helmet>\n        <title>{config.siteTitle}</title>\n        <link rel=\"canonical\" href={`${config.siteUrl}`} />\n      </Helmet>\n      <SEO postEdges={data.allMarkdownRemark.edges} />\n      <PostListing postEdges={data.allMarkdownRemark.edges} />\n    </div>\n  </Layout>\n);\n\nexport default Index;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date(formatString: \"YYYY-MM-DD\")\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n            categories\n          }\n        }\n      }\n    }\n  }\n`;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","'use strict';\n\nexports.__esModule = true;\nexports.MediaOverlay = exports.Media = undefined;\n\nvar _Media2 = require('./Media');\n\nvar _Media3 = _interopRequireDefault(_Media2);\n\nvar _MediaOverlay2 = require('./MediaOverlay');\n\nvar _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = _Media3.default;\nexports.Media = _Media3.default;\nexports.MediaOverlay = _MediaOverlay3.default;","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport Chip from \"react-md/lib/Chips\";\nimport \"./PostCategories.scss\";\n\nclass PostCategories extends Component {\n  render() {\n    const { categories } = this.props;\n    return (\n      <div className=\"post-category-container\">\n        {categories &&\n          categories.map(category => (\n            <Link\n              key={category}\n              style={{ textDecoration: \"none\" }}\n              to={`/categories/${_.kebabCase(category)}`}\n            >\n              <Chip label={category} className=\"post-preview-categories\" />\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostCategories;\n","import React, { Component } from 'react';\nimport Card from 'react-md/lib/Cards/Card';\nimport CardTitle from 'react-md/lib/Cards/CardTitle';\nimport Button from 'react-md/lib/Buttons';\nimport Avatar from 'react-md/lib/Avatars';\nimport CardText from 'react-md/lib/Cards/CardText';\nimport FontIcon from 'react-md/lib/FontIcons';\nimport { Link } from 'gatsby';\nimport moment from 'moment';\nimport Media, { MediaOverlay } from 'react-md/lib/Media';\nimport PostTags from '../PostTags';\nimport PostCategories from '../PostCategories';\nimport PostCover from '../PostCover';\nimport config from '../../../data/SiteConfig';\nimport './PostPreview.scss';\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true,\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\" */\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <Card key={postInfo.path} raise className=\"md-grid md-cell md-cell--12\">\n        <Link style={{ textDecoration: 'none' }} to={postInfo.path}>\n          <Media style={{ height: coverHeight, paddingBottom: '0px' }}>\n            <PostCover\n              postNode={postInfo}\n              coverHeight={coverHeight}\n              coverClassName=\"post-cover\"\n            />\n            <MediaOverlay>\n              <CardTitle title={postInfo.title} className=\"post-preview-title\">\n                <Button raised secondary className=\"md-cell--right\">\n                  Read\n                </Button>\n              </CardTitle>\n            </MediaOverlay>\n          </Media>\n        </Link>\n        <CardTitle\n          expander={expand}\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Julkaistu ${moment(postInfo.date).format(config.dateFormat)}`}\n          subtitle={`${postInfo.timeToRead} min lukemista`}\n        />\n\n        <CardText expandable={expand}>\n          {postInfo.excerpt}\n          <div className=\"post-binning-container\">\n            <PostCategories categories={postInfo.categories} />\n            <PostTags tags={postInfo.tags} />\n          </div>\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React from 'react';\nimport PostPreview from '../PostPreview';\n\nconst PostListing = ({ postEdges }) => {\n  const getPostList = () => {\n    const postList = [];\n    postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        categories: postEdge.node.frontmatter.categories,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead,\n      });\n    });\n    return postList;\n  };\n\n  const postList = getPostList();\n  return (\n    <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\n      <div className=\"md-grid md-cell--8 mobile-fix\">\n        {postList.map(post => (\n          <PostPreview key={post.title} postInfo={post} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PostListing;\n"],"sourceRoot":""}