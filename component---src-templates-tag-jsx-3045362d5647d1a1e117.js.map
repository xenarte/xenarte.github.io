{"version":3,"sources":["webpack:///./src/templates/tag.jsx","webpack:///./node_modules/react-md/lib/Media/index.js","webpack:///./src/components/PostCategories/index.jsx","webpack:///./src/components/PostPreview/index.jsx","webpack:///./src/components/PostListing/index.jsx"],"names":["TagTemplate","data","pageContext","location","title","tag","charAt","toUpperCase","slice","className","config","siteTitle","rel","href","siteUrl","postEdges","allMarkdownRemark","edges","pageQuery","exports","__esModule","MediaOverlay","Media","undefined","_Media3","_interopRequireDefault","_MediaOverlay3","obj","default","PostCategories","render","categories","this","props","map","category","key","style","textDecoration","to","label","Component","PostPreview","state","mobile","handleResize","bind","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","expand","coverHeight","path","raise","height","paddingBottom","PostCover","postNode","coverClassName","raised","secondary","expander","avatar","icon","iconClassName","moment","date","format","dateFormat","subtitle","timeToRead","expandable","excerpt","PostTags","tags","PostListing","postList","forEach","postEdge","push","node","fields","slug","frontmatter","cover","getPostList","post"],"mappings":"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","file":"component---src-templates-tag-jsx-3045362d5647d1a1e117.js","sourcesContent":["import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from '../layout';\r\nimport PostListing from '../components/PostListing';\r\nimport config from '../../data/SiteConfig';\r\n\r\nconst TagTemplate = ({ data, pageContext, location }) => (\r\n  <Layout\r\n    location={location}\r\n    title={`Tagged in ${pageContext.tag.charAt(0).toUpperCase() +\r\n      pageContext.tag.slice(1)}`}\r\n  >\r\n    <div className=\"tag-container\">\r\n      <Helmet>\r\n        <title>{`Posts tagged as \"${pageContext.tag}\" | ${config.siteTitle}`}</title>\r\n        <link\r\n          rel=\"canonical\"\r\n          href={`${config.siteUrl}/tags/${pageContext.tag}`}\r\n        />\r\n      </Helmet>\r\n      <PostListing postEdges={data.allMarkdownRemark.edges} />\r\n    </div>\r\n  </Layout>\r\n);\r\nexport default TagTemplate;\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query TagPage($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 1000\r\n      sort: { fields: [fields___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            date(formatString: \"YYYY-MM-DD\")\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            tags\r\n            cover\r\n            date\r\n            categories\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","'use strict';\n\nexports.__esModule = true;\nexports.MediaOverlay = exports.Media = undefined;\n\nvar _Media2 = require('./Media');\n\nvar _Media3 = _interopRequireDefault(_Media2);\n\nvar _MediaOverlay2 = require('./MediaOverlay');\n\nvar _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = _Media3.default;\nexports.Media = _Media3.default;\nexports.MediaOverlay = _MediaOverlay3.default;","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { Link } from \"gatsby\";\r\nimport Chip from \"react-md/lib/Chips\";\r\nimport \"./PostCategories.scss\";\r\n\r\nclass PostCategories extends Component {\r\n  render() {\r\n    const { categories } = this.props;\r\n    return (\r\n      <div className=\"post-category-container\">\r\n        {categories &&\r\n          categories.map(category => (\r\n            <Link\r\n              key={category}\r\n              style={{ textDecoration: \"none\" }}\r\n              to={`/categories/${_.kebabCase(category)}`}\r\n            >\r\n              <Chip label={category} className=\"post-preview-categories\" />\r\n            </Link>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostCategories;\r\n","import React, { Component } from 'react';\r\nimport Card from 'react-md/lib/Cards/Card';\r\nimport CardTitle from 'react-md/lib/Cards/CardTitle';\r\nimport Button from 'react-md/lib/Buttons';\r\nimport Avatar from 'react-md/lib/Avatars';\r\nimport CardText from 'react-md/lib/Cards/CardText';\r\nimport FontIcon from 'react-md/lib/FontIcons';\r\nimport { Link } from 'gatsby';\r\nimport moment from 'moment';\r\nimport Media, { MediaOverlay } from 'react-md/lib/Media';\r\nimport PostTags from '../PostTags';\r\nimport PostCategories from '../PostCategories';\r\nimport PostCover from '../PostCover';\r\nimport config from '../../../data/SiteConfig';\r\nimport './PostPreview.scss';\r\n\r\nclass PostPreview extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mobile: true,\r\n    };\r\n    this.handleResize = this.handleResize.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.handleResize();\r\n    window.addEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  handleResize() {\r\n    if (window.innerWidth >= 640) {\r\n      this.setState({ mobile: false });\r\n    } else {\r\n      this.setState({ mobile: true });\r\n    }\r\n  }\r\n  render() {\r\n    const { postInfo } = this.props;\r\n    const { mobile } = this.state;\r\n    const expand = mobile;\r\n    /* eslint no-undef: \"off\" */\r\n    const coverHeight = mobile ? 162 : 225;\r\n    return (\r\n      <Card key={postInfo.path} raise className=\"md-grid md-cell md-cell--12\">\r\n        <Link style={{ textDecoration: 'none' }} to={postInfo.path}>\r\n          <Media style={{ height: coverHeight, paddingBottom: '0px' }}>\r\n            <PostCover\r\n              postNode={postInfo}\r\n              coverHeight={coverHeight}\r\n              coverClassName=\"post-cover\"\r\n            />\r\n            <MediaOverlay>\r\n              <CardTitle title={postInfo.title} className=\"post-preview-title\">\r\n                <Button raised secondary className=\"md-cell--right\">\r\n                  Read\r\n                </Button>\r\n              </CardTitle>\r\n            </MediaOverlay>\r\n          </Media>\r\n        </Link>\r\n        <CardTitle\r\n          expander={expand}\r\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\r\n          title={`Julkaistu ${moment(postInfo.date).format(config.dateFormat)}`}\r\n          subtitle={`${postInfo.timeToRead} min lukemista`}\r\n        />\r\n\r\n        <CardText expandable={expand}>\r\n          {postInfo.excerpt}\r\n          <div className=\"post-binning-container\">\r\n            <PostCategories categories={postInfo.categories} />\r\n            <PostTags tags={postInfo.tags} />\r\n          </div>\r\n        </CardText>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostPreview;\r\n","import React from 'react';\r\nimport PostPreview from '../PostPreview';\r\n\r\nconst PostListing = ({ postEdges }) => {\r\n  const getPostList = () => {\r\n    const postList = [];\r\n    postEdges.forEach(postEdge => {\r\n      postList.push({\r\n        path: postEdge.node.fields.slug,\r\n        tags: postEdge.node.frontmatter.tags,\r\n        categories: postEdge.node.frontmatter.categories,\r\n        cover: postEdge.node.frontmatter.cover,\r\n        title: postEdge.node.frontmatter.title,\r\n        date: postEdge.node.fields.date,\r\n        excerpt: postEdge.node.excerpt,\r\n        timeToRead: postEdge.node.timeToRead,\r\n      });\r\n    });\r\n    return postList;\r\n  };\r\n\r\n  const postList = getPostList();\r\n  return (\r\n    <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\r\n      <div className=\"md-grid md-cell--8 mobile-fix\">\r\n        {postList.map(post => (\r\n          <PostPreview key={post.title} postInfo={post} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostListing;\r\n"],"sourceRoot":""}