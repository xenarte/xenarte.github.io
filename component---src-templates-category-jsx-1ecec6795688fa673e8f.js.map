{"version":3,"sources":["webpack:///./node_modules/react-md/lib/Media/index.js","webpack:///./src/templates/category.jsx","webpack:///./src/components/PostCategories/index.jsx","webpack:///./src/components/PostPreview/index.jsx","webpack:///./src/components/PostListing/index.jsx"],"names":["exports","__esModule","MediaOverlay","Media","undefined","_Media3","_interopRequireDefault","_MediaOverlay3","obj","default","CategoryTemplate","data","pageContext","location","title","category","charAt","toUpperCase","slice","className","config","siteTitle","rel","href","siteUrl","postEdges","allMarkdownRemark","edges","pageQuery","PostCategories","render","categories","this","props","map","key","style","textDecoration","to","label","Component","PostPreview","state","mobile","handleResize","bind","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","expand","coverHeight","path","raise","height","paddingBottom","PostCover","postNode","coverClassName","raised","secondary","expander","avatar","icon","iconClassName","moment","date","format","dateFormat","subtitle","timeToRead","expandable","excerpt","PostTags","tags","PostListing","postList","forEach","postEdge","push","node","fields","slug","frontmatter","cover","getPostList","post"],"mappings":"qHAEAA,EAAQC,YAAa,EACrBD,EAAQE,aAAeF,EAAQG,WAAQC,EAEvC,IAEIC,EAAUC,EAFA,EAAQ,SAMlBC,EAAiBD,EAFA,EAAQ,SAI7B,SAASA,EAAuBE,GAC9B,OAAOA,GAAOA,EAAIP,WAAaO,EAAM,CACnCC,QAASD,GAIbR,EAAQS,QAAUJ,EAAQI,QAC1BT,EAAQG,MAAQE,EAAQI,QACxBT,EAAQE,aAAeK,EAAeE,S,kCCrBtC,4IA8BeC,UAvBU,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,SAAtB,OACvB,kBAAC,IAAD,CACEA,SAAUA,EACVC,MACEF,EAAYG,SAASC,OAAO,GAAGC,cAC/BL,EAAYG,SAASG,MAAM,IAG7B,yBAAKC,UAAU,sBACb,kBAAC,IAAD,KACE,qDACyBP,EAAYG,SADrC,OACoDK,IAAOC,WAE3D,0BACEC,IAAI,YACJC,KAASH,IAAOI,QAAZ,eAAkCZ,EAAYG,YAGtD,kBAAC,IAAD,CAAaU,UAAWd,EAAKe,kBAAkBC,WAQ9C,IAAMC,EAAS,c,oVCPPC,G,4GAnBbC,OAAA,WAAU,IACAC,EAAeC,KAAKC,MAApBF,WACR,OACE,yBAAKZ,UAAU,2BACZY,GACCA,EAAWG,KAAI,SAAAnB,GAAQ,OACrB,kBAAC,OAAD,CACEoB,IAAKpB,EACLqB,MAAO,CAAEC,eAAgB,QACzBC,GAAE,eAAiB,IAAYvB,IAE/B,kBAAC,IAAD,CAAMwB,MAAOxB,EAAUI,UAAU,kC,GAZlBqB,c,iCC6EdC,G,sBAlEb,WAAYR,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKS,MAAQ,CACXC,QAAQ,GAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,4CAOnBC,kBAAA,WACEd,KAAKY,eACLG,OAAOC,iBAAiB,SAAUhB,KAAKY,e,EAGzCK,qBAAA,WACEF,OAAOG,oBAAoB,SAAUlB,KAAKY,e,EAG5CA,aAAA,WACMG,OAAOI,YAAc,IACvBnB,KAAKoB,SAAS,CAAET,QAAQ,IAExBX,KAAKoB,SAAS,CAAET,QAAQ,K,EAG5Bb,OAAA,WAAU,IACAuB,EAAarB,KAAKC,MAAlBoB,SACAV,EAAWX,KAAKU,MAAhBC,OACFW,EAASX,EAETY,EAAcZ,EAAS,IAAM,IACnC,OACE,kBAAC,IAAD,CAAMR,IAAKkB,EAASG,KAAMC,OAAK,EAACtC,UAAU,+BACxC,kBAAC,OAAD,CAAMiB,MAAO,CAAEC,eAAgB,QAAUC,GAAIe,EAASG,MACpD,kBAAC,IAAD,CAAOpB,MAAO,CAAEsB,OAAQH,EAAaI,cAAe,QAClD,kBAACC,EAAA,EAAD,CACEC,SAAUR,EACVE,YAAaA,EACbO,eAAe,eAEjB,kBAAC3D,EAAA,aAAD,KACE,kBAAC,IAAD,CAAWW,MAAOuC,EAASvC,MAAOK,UAAU,sBAC1C,kBAAC,IAAD,CAAQ4C,QAAM,EAACC,WAAS,EAAC7C,UAAU,kBAAnC,YAOR,kBAAC,IAAD,CACE8C,SAAUX,EACVY,OAAQ,kBAAC,IAAD,CAAQC,KAAM,kBAAC,IAAD,CAAUC,cAAc,qBAC9CtD,MAAK,aAAeuD,IAAOhB,EAASiB,MAAMC,OAAOnD,IAAOoD,YACxDC,SAAapB,EAASqB,WAAd,mBAGV,kBAAC,IAAD,CAAUC,WAAYrB,GACnBD,EAASuB,QACV,yBAAKzD,UAAU,0BACb,kBAAC,EAAD,CAAgBY,WAAYsB,EAAStB,aACrC,kBAAC8C,EAAA,EAAD,CAAUC,KAAMzB,EAASyB,W,GA3DXtC,cCiBXuC,IA9BK,SAAC,GAAmB,IAAjBtD,EAAgB,EAAhBA,UAkBfuD,EAjBc,WAClB,IAAMA,EAAW,GAajB,OAZAvD,EAAUwD,SAAQ,SAAAC,GAChBF,EAASG,KAAK,CACZ3B,KAAM0B,EAASE,KAAKC,OAAOC,KAC3BR,KAAMI,EAASE,KAAKG,YAAYT,KAChC/C,WAAYmD,EAASE,KAAKG,YAAYxD,WACtCyD,MAAON,EAASE,KAAKG,YAAYC,MACjC1E,MAAOoE,EAASE,KAAKG,YAAYzE,MACjCwD,KAAMY,EAASE,KAAKC,OAAOf,KAC3BM,QAASM,EAASE,KAAKR,QACvBF,WAAYQ,EAASE,KAAKV,gBAGvBM,EAGQS,GACjB,OACE,yBAAKtE,UAAU,+CACb,yBAAKA,UAAU,iCACZ6D,EAAS9C,KAAI,SAAAwD,GAAI,OAChB,kBAAC,EAAD,CAAavD,IAAKuD,EAAK5E,MAAOuC,SAAUqC","file":"component---src-templates-category-jsx-1ecec6795688fa673e8f.js","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.MediaOverlay = exports.Media = undefined;\n\nvar _Media2 = require('./Media');\n\nvar _Media3 = _interopRequireDefault(_Media2);\n\nvar _MediaOverlay2 = require('./MediaOverlay');\n\nvar _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = _Media3.default;\nexports.Media = _Media3.default;\nexports.MediaOverlay = _MediaOverlay3.default;","import React from 'react';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport Layout from '../layout';\nimport PostListing from '../components/PostListing';\nimport config from '../../data/SiteConfig';\n\nconst CategoryTemplate = ({ data, pageContext, location }) => (\n  <Layout\n    location={location}\n    title={\n      pageContext.category.charAt(0).toUpperCase() +\n      pageContext.category.slice(1)\n    }\n  >\n    <div className=\"category-container\">\n      <Helmet>\n        <title>\n          {`Posts in category \"${pageContext.category}\" | ${config.siteTitle}`}\n        </title>\n        <link\n          rel=\"canonical\"\n          href={`${config.siteUrl}/categories/${pageContext.category}`}\n        />\n      </Helmet>\n      <PostListing postEdges={data.allMarkdownRemark.edges} />\n    </div>\n  </Layout>\n);\n\nexport default CategoryTemplate;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date(formatString: \"YYYY-MM-DD\")\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n            categories\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport Chip from \"react-md/lib/Chips\";\nimport \"./PostCategories.scss\";\n\nclass PostCategories extends Component {\n  render() {\n    const { categories } = this.props;\n    return (\n      <div className=\"post-category-container\">\n        {categories &&\n          categories.map(category => (\n            <Link\n              key={category}\n              style={{ textDecoration: \"none\" }}\n              to={`/categories/${_.kebabCase(category)}`}\n            >\n              <Chip label={category} className=\"post-preview-categories\" />\n            </Link>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PostCategories;\n","import React, { Component } from 'react';\nimport Card from 'react-md/lib/Cards/Card';\nimport CardTitle from 'react-md/lib/Cards/CardTitle';\nimport Button from 'react-md/lib/Buttons';\nimport Avatar from 'react-md/lib/Avatars';\nimport CardText from 'react-md/lib/Cards/CardText';\nimport FontIcon from 'react-md/lib/FontIcons';\nimport { Link } from 'gatsby';\nimport moment from 'moment';\nimport Media, { MediaOverlay } from 'react-md/lib/Media';\nimport PostTags from '../PostTags';\nimport PostCategories from '../PostCategories';\nimport PostCover from '../PostCover';\nimport config from '../../../data/SiteConfig';\nimport './PostPreview.scss';\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true,\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\" */\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <Card key={postInfo.path} raise className=\"md-grid md-cell md-cell--12\">\n        <Link style={{ textDecoration: 'none' }} to={postInfo.path}>\n          <Media style={{ height: coverHeight, paddingBottom: '0px' }}>\n            <PostCover\n              postNode={postInfo}\n              coverHeight={coverHeight}\n              coverClassName=\"post-cover\"\n            />\n            <MediaOverlay>\n              <CardTitle title={postInfo.title} className=\"post-preview-title\">\n                <Button raised secondary className=\"md-cell--right\">\n                  Read\n                </Button>\n              </CardTitle>\n            </MediaOverlay>\n          </Media>\n        </Link>\n        <CardTitle\n          expander={expand}\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Julkaistu ${moment(postInfo.date).format(config.dateFormat)}`}\n          subtitle={`${postInfo.timeToRead} min lukemista`}\n        />\n\n        <CardText expandable={expand}>\n          {postInfo.excerpt}\n          <div className=\"post-binning-container\">\n            <PostCategories categories={postInfo.categories} />\n            <PostTags tags={postInfo.tags} />\n          </div>\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React from 'react';\nimport PostPreview from '../PostPreview';\n\nconst PostListing = ({ postEdges }) => {\n  const getPostList = () => {\n    const postList = [];\n    postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        categories: postEdge.node.frontmatter.categories,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead,\n      });\n    });\n    return postList;\n  };\n\n  const postList = getPostList();\n  return (\n    <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\n      <div className=\"md-grid md-cell--8 mobile-fix\">\n        {postList.map(post => (\n          <PostPreview key={post.title} postInfo={post} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PostListing;\n"],"sourceRoot":""}